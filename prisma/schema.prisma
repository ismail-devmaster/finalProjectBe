datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  PATIENT
  DOCTOR
  RECEPTIONIST
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatusEnum {
  WAITING
  UPCOMING
  COMPLETED
}

enum PaymentStatusEnum {
  PENDING
  PAID
  CANCELLED
}

enum QueueStatusEnum {
  WAITING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  CANCELLED
}

enum AppointmentTypeEnum {
  GENERAL
  SPECIALIST
  FOLLOW_UP
  EMERGENCY
}

enum InventoryUnit {
  PCS
  BOXES
  SETS
  PACKS
  BOTTLES
}

enum InventoryStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

model Sex {
  id     Int    @id @default(autoincrement())
  gender Gender  @unique
  users  User[]
}

model AppointmentStatus {
  id           Int                   @id @default(autoincrement())
  status       AppointmentStatusEnum @unique
  appointments Appointment[]
}

model AppointmentType {
  id      Int                 @id @default(autoincrement())
  type    AppointmentTypeEnum @unique
  actions Action[]
}

model PaymentStatus {
  id       Int               @id @default(autoincrement())
  status   PaymentStatusEnum @unique
  payments Payment[]
}

model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  password          String
  firstName         String
  lastName          String
  dateOfBirth       DateTime
  phone             String?
  sexId             Int
  sex               Sex             @relation(fields: [sexId], references: [id])
  isVerified        Boolean         @default(false)
  verificationToken String?         @unique
  resetToken        String?         @unique
  resetTokenExpiry  DateTime?
  refreshToken      String?
  role              Role            @default(PATIENT)
  patient           Patient?        @relation("UserToPatient")
  doctor            Doctor?         @relation("UserToDoctor")
  receptionist      Receptionist?   @relation("UserToReceptionist")
  admin             Admin?          @relation("UserToAdmin")
  assigneeTasks  Task[]   @relation("UserToAssignee")
  assignorTasks  Task[]   @relation("UserToAssignor")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("users")
}

model Patient {
  userId         Int            @id
  user           User           @relation("UserToPatient", fields: [userId], references: [id], onDelete: Cascade)
  medicalHistory String?
  appointments   Appointment[]
  payments       Payment[]
  queueEntries   Queue[]
  actions        Action[]

  @@map("patients")
}
model Doctor {
  userId       Int           @id
  user         User          @relation("UserToDoctor", fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  payments     Payment[]

  @@map("doctors")
}

model Receptionist {
  userId Int @id
  user   User   @relation("UserToReceptionist", fields: [userId], references: [id], onDelete: Cascade)

  @@map("receptionists")
}

model Admin {
  userId Int @id
  user   User   @relation("UserToAdmin", fields: [userId], references: [id])
  
  @@map("admins")
}

model Action {
  id                   Int               @id @default(autoincrement())
  appointmentTypeId    Int
  patientId            Int
  description          String?
  totalPayment         Float             @default(0.00)
  startDate            DateTime          @default(now())
  endDate              DateTime?
  patient              Patient           @relation(fields: [patientId], references: [userId], onDelete: Cascade)
  appointmentType      AppointmentType   @relation(fields: [appointmentTypeId], references: [id], onDelete: Cascade)
  appointments         Appointment[]
  payments             Payment[]
  isCompleted          Boolean           @default(false)
  completedAt DateTime?
}

model Appointment {
  id              Int               @id @default(autoincrement())
  patientId       Int
  doctorId        Int
  actionId        Int
  statusId        Int
  date            DateTime          @db.Date
  time            DateTime          @db.Time
  additionalNotes String?
  doctor          Doctor            @relation(fields: [doctorId], references: [userId])
  patient         Patient           @relation(fields: [patientId], references: [userId], onDelete: Cascade)
  status          AppointmentStatus @relation(fields: [statusId], references: [id])
  action          Action            @relation(fields: [actionId], references: [id], onDelete: Cascade)
  queueEntries    Queue[]
}

model Queue {
  id                    Int             @id @default(autoincrement())
  patientId             Int
  appointmentId         Int
  estimatedWaitTime     Int
  estimatedTimeToDoctor Int
  status                QueueStatusEnum
  appointment           Appointment     @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient               Patient         @relation(fields: [patientId], references: [userId], onDelete: Cascade)
}

model Payment {
  id          Int           @id @default(autoincrement())
  patientId   Int
  doctorId    Int
  statusId    Int
  actionId    Int
  amount      Float         @default(0.00)
  date        DateTime      @db.Date
  time        DateTime      @db.Time
  description String?
  doctor      Doctor        @relation(fields: [doctorId], references: [userId])
  patient     Patient       @relation(fields: [patientId], references: [userId], onDelete: Cascade)
  status      PaymentStatus @relation(fields: [statusId], references: [id])
  action      Action        @relation(fields: [actionId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  inventories Inventory[]
}

model Inventory {
  id         Int             @id @default(autoincrement())
  name       String
  categoryId Int
  category   Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  quantity   Int
  unit       InventoryUnit
  status     InventoryStatus
  expiryDate DateTime?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  assigneeId  Int
  assignee    User         @relation("UserToAssignee", fields: [assigneeId], references: [id])
  assignorId  Int
  assignor    User         @relation("UserToAssignor", fields: [assignorId], references: [id])
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(PENDING)
  dueDate     DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  completedAt DateTime?
}
